$date
2023-12-27T07:11+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module Multiply $end
 $var wire 8 ! in0 $end
 $var wire 1 # in_valid $end
 $var wire 1 ' out_bits_last $end
 $var wire 1 ( last $end
 $var wire 16 * out0 $end
 $var wire 1 - rst $end
 $var wire 16 . out0Inc $end
 $var wire 1 / out_valid $end
 $var wire 16 0 out0Nxt $end
 $var wire 1 1 clock $end
 $var wire 1 2 in_ready $end
 $var wire 8 4 in1 $end
 $var wire 8 5 in0Nxt $end
 $var wire 8 7 in_bits_x_1 $end
 $var wire 3 8 out0IncMux $end
 $var wire 1 9 in_bits_last $end
 $var wire 16 : out_bits_x_0 $end
 $var wire 1 < reset $end
 $var wire 1 = counterHsk $end
 $var wire 1 > out_ready $end
 $var wire 8 ? in_bits_x_0 $end
  $scope module counterHsk $end
   $var wire 3 " counter $end
   $var wire 1 $ validNxt $end
   $var wire 3 % counterNxt $end
   $var wire 1 & regen $end
   $var wire 1 ) rst $end
   $var wire 1 + counterEn $end
   $var wire 1 , readyPre $end
   $var wire 1 3 clock $end
   $var wire 1 6 validPre $end
   $var wire 1 ; readyNxt $end
  $upscope $end
$upscope $end
$enddefinitions $end
$dumpvars
0;
0&
0<
0'
0=
b0000000000000000 .
0>
06
0#
09
02
03
b000 "
b000 8
b0000000000000000 :
0-
b00000000 !
b00000000 ?
b00000000 7
b000 %
0/
0(
01
0)
b00000000 4
b0000000000000000 0
0+
b00000000 5
0,
0$
b0000000000000000 *
$end
#0
1<
b001 %
12
1,
#1
13
11
#6
03
0<
01
#11
13
11
#16
03
01
#21
13
11
#26
03
01
#31
13
11
#36
03
01
#41
13
11
#46
03
01
#51
13
11
#56
03
01
#61
13
11
#66
03
01
#71
13
11
#76
03
01
#81
13
11
#86
03
01
#91
13
11
#96
03
01
#101
13
11
#106
03
b01110000 ?
01
1&
1#
b011 8
b11000000 5
19
16
1+
b01110000 7
1>
1;
#111
b11000000 !
13
b010 %
b01110000 4
11
b001 "
b110 8
b00000000 5
02
1'
1(
0,
#116
03
01
0#
06
#121
b00000000 !
13
b011 %
b010 "
11
b000 8
#126
03
01
#131
13
b100 %
b011 "
11
#136
03
01
#141
13
b000 %
b100 "
11
0&
12
1$
1/
1,
#146
03
b00000000 ?
01
09
b00000000 7
0>
